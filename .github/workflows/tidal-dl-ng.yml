name: TidalDLNG
run-name: ${{ github.actor }}
on:
  workflow_dispatch:
    inputs:
      command:
        description: Select commands to run
        required: true
        type: choice
        options:
          - DOWNLOAD
          - LOGIN
        default: DOWNLOAD
      query:
        description: Set queries to download (only used for download)
        required: true
        type: string
      quality:
        description: Select downloaded audio quality
        required: true
        type: choice
        options:
          - LOW
          - HIGH
          - LOSSLESS
          - HI RES LOSSLESS
          - AUTO
        default: AUTO

permissions:
  actions: write
  contents: read

jobs:
  downloads:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
      - name: Install python dependencies
        run: |
          python -m pip install -U pip
          python -m pip install -U tidal-dl-ng
      - name: Set up FFmpeg
        id: setup_ffmpeg
        uses: AnimMouse/setup-ffmpeg@v1
        with:
          version: release
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Assign credentials secrets
        uses: cschleiden/replace-tokens@master
        with:
          tokenPrefix: '[['
          tokenSuffix: ']]'
          files: '["modules/tidal-dl-ng/token.json"]'
        env:
          TIDAL_PLATFORM: "${{ secrets.TIDAL_PLATFORM }}"
          TIDAL_FORMATS: "${{ secrets.TIDAL_FORMATS }}"
          TIDAL_CLIENT_ID: "${{ secrets.TIDAL_CLIENT_ID }}"
          TIDAL_CLIENT_SECRET: "${{ secrets.TIDAL_CLIENT_SECRET }}"
          TIDAL_VALID: "${{ secrets.TIDAL_VALID }}"
      - name: Run command
        env:
          COMMAND: ${{ inputs.command }}
          QUERY: ${{ inputs.query }}
          QUALITY: ${{ inputs.quality }}
        shell: bash
        run: |
          tidal-dl-ng login
      - name: Get PCKE token secret
        id: pcke
        run: |
          echo "client_secret=$(jq .client_secret '$HOME/.config/tidal-dl-ng/token.json')" >> $GITHUB_OUTPUT
      - name: Write PCKE token to file
        env:
          TIDAL_CLIENT_SECRET: ${{ secrets.TIDAL_CLIENT_SECRET }}
        if: ${{ steps.pcke.outputs.client_secret != env.TIDAL_CLIENT_SECRET }}
        run: |
          cat > secrets.env <<EOF
          TIDAL_PLATFORM=$(jq .platform '$HOME/.config/tidal-dl-ng/token.json')
          TIDAL_FORMATS=$(jq .formats '$HOME/.config/tidal-dl-ng/token.json')
          TIDAL_CLIENT_ID=$(jq .clientId '$HOME/.config/tidal-dl-ng/token.json')
          TIDAL_CLIENT_SECRET=${{ steps.pcke.outputs.client_secret }}
          TIDAL_VALID=$(jq .valid '$HOME/.config/tidal-dl-ng/token.json')
          EOF
      - name: Set secrets
        env:
          GH_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
          TIDAL_CLIENT_SECRET: ${{ secrets.TIDAL_CLIENT_SECRET }}
        if: ${{ steps.pcke.outputs.client_secret != env.TIDAL_CLIENT_SECRET }}
        run: |
          gh secret set -a actions -f secrets.env    
      - name: Generate datetime codes
        id: dt_codes
        shell: bash
        run: |
          echo "dtcode=$(date +%N%s | sed 's/0//g' | cut --complement -c 5-10 | cut -c 3-7)" >> $GITHUB_OUTPUT
      - name: Upload downloads as artifact
        id: artifact
        uses: actions/upload-artifact@v4
        with:
          name: tidal-dl-ng-downloads-${{ steps.dt_codes.outputs.dtcode }}
          path: music
          if-no-files-found: error
          retention-days: 7
          include-hidden-files: true
      - name: Print artifact info
        shell: bash
        run: |
          echo "[INFO] artifact-id:\n"
          echo "${{ steps.artifact.outputs.artifact-id }}"
          echo "[INFO] artifact-url:\n"
          echo "${{ steps.artifact.outputs.artifact-url }}"
