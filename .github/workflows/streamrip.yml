name: Streamrip
run-name: ${{ github.actor }}
on:
  workflow_dispatch:
    inputs:
      command:
        description: Choose Streamrip command to run
        required: true
        type: choice
        options:
          - ID
          - URL
          - SEARCH
          - LASTFM
          - CONFIG RESET
        default: URL
      service:
        description: Select music service (only used for search)
        required: true
        type: choice
        options:
          - QOBUZ
          - DEEZER
          - TIDAL
        default: QOBUZ
      type:
        description: Select media types (only used for search)
        required: true
        type: choice
        options:
          - TRACK
          - ALBUM
          - PLAYLIST
        default: TRACK
      query:
        description: Set queries to download
        required: true
        type: string
      quality:
        description: Select downloaded songs quality (quality depends on the source)
        required: false
        type: choice
        options:
          - "4"
          - "3"
          - "2"
          - "1"
          - "0"
          - AUTO
        default: AUTO
      codec:
        description: Select downloaded songs format
        required: false
        type: choice
        options:
          - FLAC
          - ALAC
          - OGG
          - AAC
          - MP3
          - ORIGINAL
        default: ORIGINAL

permissions:
  actions: write
  contents: read

jobs:
  downloads:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
      - name: Install python dependencies
        run: |
          python -m pip install -U pip
          python -m pip install git+https://github.com/nathom/streamrip.git@dev
      - name: Install tomlq
        uses: baptiste0928/cargo-install@v3
        with:
          crate: tomlq
      - name: Set up FFmpeg
        id: setup_ffmpeg
        uses: AnimMouse/setup-ffmpeg@v1
        with:
          version: release
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Assign credentials secrets
        uses: cschleiden/replace-tokens@master
        with:
          tokenPrefix: '[['
          tokenSuffix: ']]'
          files: '["modules/streamrip/config.toml"]'
        env:
          QOBUZ_USER_ID: "${{ secrets.QOBUZ_USER_ID }}"
          QOBUZ_TOKEN: "${{ secrets.QOBUZ_TOKEN }}"
          DEEZER_ARL: "${{ secrets.DEEZER_ARL }}"
      - name: Assign credentials secrets
        env:
          TIDAL_USER_ID: "${{ secrets.TIDAL_USER_ID }}"
          TIDAL_COUNTRY_CODE: "${{ secrets.TIDAL_COUNTRY_CODE }}"
          TIDAL_ACCESS_TOKEN: "${{ secrets.TIDAL_ACCESS_TOKEN }}"
          TIDAL_REFRESH_TOKEN: "${{ secrets.TIDAL_REFRESH_TOKEN }}"
          TIDAL_TOKEN_EXPIRY: "${{ secrets.TIDAL_TOKEN_EXPIRY }}"
        if: ${{ env.TIDAL_USER_ID != "" }}
        uses: cschleiden/replace-tokens@master
        with:
          tokenPrefix: '[['
          tokenSuffix: ']]'
          files: '["modules/streamrip/config.toml"]'
      - name: Run command
        env:
          COMMANDS: ${{ inputs.command }}
          SERVICE: ${{ inputs.service }}
          TYPE: ${{ inputs.type }}
          QUERY: ${{ inputs.query }}
          QUALITY: ${{ inputs.quality }}
          CODEC: ${{ inputs.codec }}
        shell: bash
        run: |
          python -m modules.streamrip.run
      - name: Check update of TIDAL credentials
        id: tidal_auth
        run: |
          echo "access_token=$(tq -f modules/streamrip/config.toml 'tidal.access_token')" >> $GITHUB_OUTPUT
      - name: Write TIDAL credentials to file
        env:
          TIDAL_ACCESS_TOKEN: ${{ secrets.TIDAL_ACCESS_TOKEN }}
        if: ${{ steps.tidal_auth.outputs.access_token != env.TIDAL_ACCESS_TOKEN }}
        run: |
          cat > secrets.env <<EOF
          TIDAL_USER_ID=$(tq -f modules/streamrip/config.toml 'tidal.user_id')
          TIDAL_COUNTRY_CODE=$(tq -f modules/streamrip/config.toml 'tidal.country_code')
          TIDAL_ACCESS_TOKEN=${{ steps.tidal_auth.outputs.access_token }}
          TIDAL_REFRESH_TOKEN=$(tq -f modules/streamrip/config.toml 'tidal.refresh_token')
          TIDAL_TOKEN_EXPIRY=$(tq -f modules/streamrip/config.toml 'tidal.token_expiry')
          EOF
      - name: Set secrets
        env:
          GH_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
          TIDAL_ACCESS_TOKEN: ${{ secrets.TIDAL_ACCESS_TOKEN }}
        if: ${{ steps.tidal_auth.outputs.access_token != env.TIDAL_ACCESS_TOKEN }}
        run: |
          gh secret set -a actions -f secrets.env
      - name: Generate datetime codes
        id: dt_codes
        shell: bash
        run: |
          echo "dtcode=$(date +%N%s | sed 's/0//g' | cut --complement -c 5-10 | cut -c 3-7)" >> $GITHUB_OUTPUT
      - name: Upload downloads as artifact
        id: artifact
        uses: actions/upload-artifact@v4
        with:
          name: streamrip-downloads-${{ steps.dt_codes.outputs.dtcode }}
          path: music
          if-no-files-found: error
          retention-days: 7
          include-hidden-files: true
      - name: Print artifact info
        shell: bash
        run: |
          echo "[INFO] artifact-id:\n"
          echo "${{ steps.artifact.outputs.artifact-id }}"
          echo "[INFO] artifact-url:\n"
          echo "${{ steps.artifact.outputs.artifact-url }}"
